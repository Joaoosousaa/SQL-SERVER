--01 - SELECIONAR TODOS OS DIRETORES
SELECT*
FROM DIRETOR


--02 - SELECIONAR TODOS OS ATORES
SELECT*
FROM ATOR


--03 - SELECIONAR TODOS OS GENEROS
SELECT*
FROM GENERO


--04 - SELECIONAR TODOS OS FILMES, EXCLUÍDOS, OU NÃO 
SELECT*
FROM FILME

--05 - SELECIONAR OS DIRETORES EM ORDEM DE NOME 
SELECT NOME_DIRETOR
FROM DIRETOR

--06 - SELECIONAR OS ATORES EM ORDEM DE CÓDIGO
SELECT ID_ATOR
FROM ATOR

--07 - SELECIONAR OS GENEROS EM ORDEM DECRESCENTE DO NOME
SELECT NOME_GENERO
FROM GENERO
ORDER BY NOME_GENERO DESC

--08 - SELECIONAR O ANO, O NOME ORIGINAL, O NOME EM PORTUGUÊS E O CÓDIGO IMDB DOS FILMES
SELECT NOME_ORIGINAL_FILME,NOME_FILME ,ID_FILME
FROM FILME 

--09 - SELECIONAR O NOME ORIGINAL DO FILME, O NOME DO DIRETOR, OS NOMES DOS ATORES E O NOME DOS GÊNEROS
SELECT NOME_ORIGINAL_FILME,NOME_DIRETOR,NOME_ATOR,NOME_GENERO
FROM FILME F
JOIN DIRETOR D
ON F.ID_DIRETOR=D.ID_DIRETOR
JOIN FILME_ATOR FA
ON FA.ID_FILME=F.ID_FILME
JOIN ATOR A
ON FA.ID_ATOR=A.ID_ATOR
JOIN FILME_GENERO FG
ON FG.ID_FILME=F.ID_FILME
JOIN GENERO G
ON FG.ID_GENERO=G.ID_GENERO

--10 - SELECIONAR TODOS OS GÊNEROS COM AS QUANTIDADES DE FILMES DE CADA UM
SELECT NOME_GENERO,COUNT(*)'QTD FILMES'
FROM GENERO G
JOIN FILME_GENERO FG
ON FG.ID_GENERO=G.ID_GENERO
JOIN FILME F
ON FG.ID_FILME= F.ID_FILME
GROUP BY NOME_GENERO

---SELECT COM TODOS OS FILMES DOS ANOS 2010,2012 E 2014
SELECT NOME_FILME
FROM FILME 
WHERE ANO_FILME IN (2010,2012,2014)


---- SELECIONAR TODOS OS FILMES MAIS ANTIGOS DO ALIEN, OU SEJA, ONDE O ANO É MENOR QUE 2000 E 
--TODOS OS FILMES NOVOS DO HIGHLANDER, OU SEJA, ONDE O ANO É POSTERIOR A 2000
SELECT NOME_FILME,ANO_FILME
FROM FILME F
WHERE NOME_FILME LIKE'%ALIEN%' AND ANO_FILME < 2000 
SELECT NOME_FILME,ANO_FILME
FROM FILME F
WHERE NOME_FILME LIKE '%HIGHLANDER%'AND ANO_FILME >2000

--11 - SELECIONAR TODOS OS ANOS DOS FILMES, COM AS QUANTIDADES DE FILMES DE CADA UM, 
--ORDENADO DO ANO MAIS RECENTE PARA O MAIS ANTIGO
SELECT F.ANO_FILME, COUNT(*) 'QTD_FILMES'
FROM FILME F
GROUP BY ANO_FILME
ORDER BY ANO_FILME DESC 

--11,5 - SELECIONAR TODOS OS ANOS DOS FILMES, COM AS QUANTIDADES DE FILMES DE CADA UM,
--ORDENADO DO ANO MAIS RECENTE PARA O MAIS ANTIGO, POREM RETORNAR APENAS OS ANOS QUE TIVEREM MAIS DE 5 FILMES
SELECT F.ANO_FILME, COUNT(*) 'QTD_FILMES'
FROM FILME F
GROUP BY ANO_FILME 
HAVING COUNT (*)>5
ORDER BY ANO_FILME DESC

--12 - SELECIONAR TODOS OS FILMES DE ANOS COM MAIS DE 3 FILMES
SELECT ANO_FILME, COUNT (*) 'QTD_FILMES'
FROM FILME F
GROUP BY ANO_FILME
HAVING COUNT (*)>3

--13 - SELECIONAR TODOS OS DIRETORES QUE FIZERAM MAIS DE UM FILME
SELECT NOME_DIRETOR, COUNT (*)
FROM DIRETOR D
JOIN FILME F
ON D.ID_DIRETOR=F.ID_DIRETOR
GROUP BY NOME_DIRETOR
HAVING COUNT (*)>1

--14 - SELECIONAR TODOS OS FILMES EM QUE O PERSONAGEM SINESTRO APARECE (FAZER UTILIZANDO JOIN E SUB QUERY)
SELECT NOME_FILME
FROM FILME F
JOIN FILME_ATOR FA
ON F.ID_FILME=FA.ID_FILME
WHERE NOME_PERSONAGEM LIKE '%SINESTRO%'
GROUP BY NOME_FILME

--15 - SELECIONAR TODOS OS FILMES EM QUE O ATOR JAMES EARL JONES TRABALHOU, 
--RETORNAR TAMBEM A COLUNA COM O NOME DO ATOR
SELECT NOME_FILME,NOME_ATOR
FROM FILME F
JOIN FILME_ATOR FA
ON F.ID_FILME=FA.ID_FILME
JOIN ATOR A
ON FA.ID_ATOR=A.ID_ATOR
WHERE NOME_ATOR LIKE'%JAMES EARL JONES%'

--16 - SELECT DE TODOS OS FILMES COM ANO ANTERIOR A 2000
SELECT*
FROM FILME
WHERE ANO_FILME <2000
  
-- SELECT DE FILMES ENTRE 2005 E 2010
SELECT*
FROM FILME 
WHERE ANO_FILME BETWEEN 2005 AND 2010

--SELECT DE FILMES ONDE CONTEM RAMBO NA COLUNA NOME_ORIGINAL_FILME
SELECT NOME_ORIGINAL_FILME
FROM FILME
WHERE NOME_ORIGINAL_FILME LIKE '%RAMBO%'

--29 - SELECIONAR OS DIRETORES QUE NÃO TEM FILMES ASSOCIADOS
SELECT D.NOME_DIRETOR,F.NOME_FILME
FROM DIRETOR D
LEFT JOIN FILME F
ON D.ID_DIRETOR=F.ID_DIRETOR
WHERE NOME_FILME IS NULL

--30 - SELECIONAR OS GENEROS QUE NÃO TEM FILMES ASSOCIADOS
SELECT G.NOME_GENERO,FG.ID_FILME
FROM GENERO G
LEFT JOIN FILME_GENERO FG
ON G.ID_GENERO=FG.ID_GENERO
WHERE FG.ID_GENERO IS NULL

--31 - SELECIONAR OS FILMES DO GENERO ACTION DO ANO 2009 QUE TENHAM SCARLETT JOHANSSON NO ELENCO
SELECT G.NOME_GENERO
FROM FILME F
JOIN FILME_GENERO FG
ON F.ID_FILME=FG.ID_FILME
JOIN GENERO G
ON FG.ID_GENERO = G.ID_GENERO
JOIN FILME_ATOR FA
ON F.ID_FILME = FA.ID_FILME
JOIN ATOR A
ON FA.ID_ATOR = A.ID_ATOR
WHERE ANO_FILME=2009  AND NOME_ATOR = 'SCARLETT JOHANSSON' AND NOME_GENERO = 'ACTION'

--32 - SELECIONAR OS DIRETORES DOS FILMES EM QUE JON FAVREAU ATUOU
select NOME_DIRETOR,NOME_ATOR 
from DIRETOR D
join FILME F
ON D.ID_DIRETOR=F.ID_DIRETOR
JOIN FILME_ATOR FA
ON FA.ID_FILME=F.ID_FILME
JOIN ATOR A
ON FA.ID_ATOR=A.ID_ATOR
WHERE NOME_ATOR LIKE '%JON FAVREAU%'

--33 - SELECIONAR OS PERSONAGENS DO ATOR KARL URBAN, EXCLUÍDOS, OU NÃO
SELECT NOME_ATOR,NOME_PERSONAGEM
FROM ATOR A
JOIN FILME_ATOR FA
ON A.ID_ATOR=FA.ID_ATOR
WHERE NOME_ATOR LIKE '%KARL URBAN%'

--34 - SELECIONAR OS ATORES QUE FIZERAM PERSONAGENS SEM NOME EM FILMES
SELECT A.NOME_ATOR,FA.NOME_PERSONAGEM
FROM ATOR A
JOIN FILME_ATOR FA
ON A.ID_ATOR=FA.ID_ATOR
JOIN FILME F
ON FA.ID_FILME=F.ID_FILME
WHERE FA.NOME_PERSONAGEM =''

--35 - SELECIONAR OS NOMES DOS FILMES EM QUE O ATOR KARL URBAN ATUOU
SELECT F.NOME_ORIGINAL_FILME,A.NOME_ATOR
FROM FILME F
JOIN  FILME_ATOR FA
ON F.ID_FILME=FA.ID_FILME
JOIN ATOR A
ON FA.ID_ATOR=A.ID_ATOR
WHERE A.NOME_ATOR LIKE '%KARL URBAN%'

--37 - SELECIONAR OS ATORES QUE NÃO ATUARAM
SELECT A.NOME_ATOR,F.NOME_FILME
FROM ATOR A
LEFT JOIN FILME_ATOR FA
ON A.ID_ATOR=FA.ID_ATOR
LEFT JOIN FILME F
ON FA.ID_FILME=F.ID_FILME 
WHERE F.NOME_FILME IS NULL

--38 - SELECIONAR OS NOMES DE TODOS OS ATORES QUE INTERPRETARAM O PERSONAGEM CONAN
SELECT A.NOME_ATOR
FROM ATOR A
JOIN FILME_ATOR FA
ON A.ID_ATOR=FA.ID_ATOR
WHERE NOME_PERSONAGEM  LIKE 'CONAN'

--39 - SELECIONAR OS NOMES DE TODOS OS ATORES QUE INTERPRETARAM O PERSONAGEM CONAN EM MAIS DE UM FILME
SELECT COUNT(*) FA.NOME_PERSONAGEM,F.ID_FILME
FROM ATOR A
JOIN FILME_ATOR FA
ON A.ID_ATOR=FA.ID_ATOR
JOIN FILME F
ON FA.ID_FILME=F.ID_FILME
WHERE FA.NOME_PERSONAGEM  LIKE 'CONAN'
GROUP BY FA.NOME_PERSONAGEM  
HAVING COUNT (F.ID_FILME >1)

-- 40 DOS GENEROS QUE TEM MAIS FILMES, SELECIONAR APENAS DO 3º AO 5º
SELECT G.NOME_GENERO, COUNT(ID_FILME) QT_FILMES
FROM GENERO G
JOIN FILME_GENERO FG
ON G.ID_GENERO=FG.ID_GENERO
GROUP BY G.NOME_GENERO
ORDER BY 2 DESC
OFFSET 2 ROWS --ROWS EM INGLES SIGNIFICA LINHAS
FETCH NEXT 3 ROWS ONLY --QUANTIDADE DE LINHA QUE ELE VAI TRAZER

-- 41 DOS FILMES QUE TENHAM MENOS DE 10 ATORES, RETORNAR DO 10º AO 20º APENAS
SELECT F.NOME_ORIGINAL_FILME,COUNT(FA.ID_ATOR) QT_ATOR
FROM FILME F
INNER JOIN FILME_ATOR FA
ON F.ID_FILME = FA.ID_FILME
GROUP BY F.NOME_ORIGINAL_FILME
HAVING COUNT(FA.ID_ATOR) < 10
ORDER BY 2 DESC
OFFSET 9 ROWS
FETCH NEXT 11 ROWS ONLY

-- 42 DOS FILMES DO DIRETOR JON FAVREAU EXISTENTES NO CADASTRO, RETORNAR APENAS O 3º FILME QUE ELE DIRIGIU
SELECT F.NOME_FILME
FROM FILME F
JOIN DIRETOR D
ON F.ID_DIRETOR=D.ID_DIRETOR
WHERE NOME_DIRETOR = 'JON FAVREAU' 
ORDER BY 1
OFFSET 2 ROWS
FETCH NEXT 1 ROWS ONLY


-- 43 O CLIENTE ACABA DE FAZER UMA CONTAGEM DE SEUS FILMES DA FILMOTECA,
--E PRECISA GRAVAR OS GENEROS, SUAS RESPECTIVAS QTDES DE FILMES E A DATA E HORA ATUAL DA CONTAGEM
SELECT G.NOME_GENERO, COUNT(ID_FILME) QT_FILMES, GETDATE()
FROM GENERO G
JOIN FILME_GENERO FG
ON G.ID_GENERO=FG.ID_GENERO
GROUP BY G.NOME_GENERO
ORDER BY 2 DESC

-- 44 CONSULTAR OS DIRETORES E OS NOMES DOS FILMES E SEUS RESPECTIVOS ANOS QUE ELES DIRIGIRAM. 
--CASO O FILME FOR ANTERIOR A 2010 e POSTERIOR A 2005, RETORNAR UMA COLUNA QUE DIZ QUE ELE 'NÃO É LANÇAMENTO', 
--SE FOR POSTERIOR A 2010 RETORNAR ELE COMO 'LANÇAMENTO', SE FOR ANTERIOR A 2005 E POSTERIOR A 1995 RETORNAR 'ANTIGO'
--E SE FOR ANTERIOR A 1995 RETORNAR 'MUITO ANTIGO'
SELECT NOME_DIRETOR, NOME_FILME,ANO_FILME,
CASE WHEN ANO_FILME >=2005 AND ANO_FILME<2010
THEN 'NAO E LANÇAMENTO'
WHEN ANO_FILME >2010 THEN 'E LANÇAMENTO'
WHEN ANO_FILME>=1995 THEN 'ANTIGO'
ELSE 'MUITO ANTIGO'
END AS CLASSIFICACAO
FROM DIRETOR D
JOIN FILME F
ON D.ID_DIRETOR=F.ID_DIRETOR
ORDER BY CLASSIFICACAO ASC
-- 44,5 CONSULTAR OS DIRETORES E OS NOMES DOS FILMES E SEUS RESPECTIVOS ANOS QUE ELES DIRIGIRAM.
--CASO O FILME FOR ANTERIOR A 2010 e POSTERIOR A 2005, RETORNAR UMA COLUNA QUE DIZ QUE ELE 'NÃO É LANÇAMENTO',
--SE FOR POSTERIOR A 2010 RETORNAR ELE COMO 'LANÇAMENTO', SE FOR ANTERIOR A 2005 E POSTERIOR A 1995 RETORNAR 'ANTIGO' 
--E SE FOR ANTERIOR A 1995 RETORNAR 'MUITO ANTIGO', FAZER O MESMO EXERCICIO UTILIZANDO IIF
SELECT NOME_DIRETOR,NOME_FILME,ANO_FILME,
IIF (ANO_FILME>= 2005 AND ANO_FILME <=2010, 'NAO E LANCAMENTO', IIF(ANO_FILME>=2010, 'E LANCAMENTO', IIF (ANO_FILME>=1995,'ANTIGO','MUITO ANTIGO'))) AS CLASSIFICACAO
FROM DIRETOR D
JOIN FILME F
ON D.ID_DIRETOR=F.ID_DIRETOR
ORDER BY CLASSIFICACAO ASC
-- 45 CONSULTAR OS GENEROS E SUA RESPECTIVA QNTDE DE FILMES DENTRO DE CADA ANO. DEVE SER ADICIONADO UMA
--COLUNA PRA CASO O ANO TIVER MAIS DE 2 FILMES DEVE APARECER '[NOME_GENERO] reinou nesse ano',
--caso contrario '[nome_genero] não foi determinante'
SELECT NOME_GENERO+' '+'REINOU ESSE ANO'
FROM FILME F
JOIN FILME_GENERO FG
ON F.ID_FILME=FG.ID_FILME
JOIN GENERO G
ON G.ID_GENERO=FG.ID_GENERO


-- 46 O DONO DA LOCADORA GOSTARIA DE ORGANIZAR SUAS FILEIRAS POR GENERO DE FILMES DE MODO QUE CADA 
--FILEIRA SEJA A PRIMEIRA LETRA DOS GENEROS EXISTENTES. A CONSULTA AO BANCO DEVE RETORNAR O NOME DO GENERO
--E OUTRA COLUNA DIZENDO 'O genero [NOME_GENERO] deve ser posto na fileira [NomeFileira]
SELECT G.NOME_GENERO,F.NOME_ORIGINAL_FILME,SUBSTRING(G.NOME_GENERO,1,1) AS FILEIRA,'O FILME'+F.NOME_ORIGINAL_FILME+'DEVVE SER POSTO NA FILEIRA'+SUBSTRING(G.NOME_GENERO,1,1) AS FILEIRA_FILME
FROM FILME F
JOIN FILME_GENERO FG
ON F.ID_FILME=FG.ID_FILME
JOIN GENERO G
ON FG.ID_GENERO=G.ID_GENERO


-- 47 COM BASE NO RESULTADO DO EXERCICIO 46, CONSULTAR QUANTOS GENEROS E QUANTOS FILMES TEM EM CADA FILEIRA, 
--RETORNANDO NOME DA FILEIRA, QTDE DE GENEROS E QTDE DE FILMES. CASO A FILEIRA TENHA MENOS OU IGUAL A 2 GENEROS,
--CLASSIFICAR ELA COMO 'Comprar mais filmes de genero´[NOME_GENERO]', caso contrario classificar como 'Fileira OK'
 -- RESOLVER VIA CTE
WITH CTE1 AS
(
SELECT 
	SUBSTRING(G.NOME_GENERO, 1,1) AS FILEIRA
	,COUNT(ID_FILME) QT_FILMES
FROM
	GENERO G
INNER JOIN FILME_GENERO FG
ON G.ID_GENERO = FG.ID_GENERO
GROUP BY
	G.NOME_GENERO
),
CTE2 AS
(
SELECT
	FILEIRA
	,SUM(QT_FILMES) AS QTD_FILMES
	,COUNT(FILEIRA) AS QT_GENERO
FROM
	CTE1
GROUP BY
	FILEIRA
)

SELECT DISTINCT
	CTE2.FILEIRA
	,CTE2.QTD_FILMES
	,CTE2.QT_GENERO
FROM
	CTE2
